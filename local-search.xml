<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2022/11/22/My-New-Post/"/>
    <url>/2022/11/22/My-New-Post/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/22/hello-world/"/>
    <url>/2022/11/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>脆弱性评价</title>
    <link href="/2020/11/22/%E8%84%86%E5%BC%B1%E6%80%A7%E8%AF%84%E4%BB%B7/"/>
    <url>/2020/11/22/%E8%84%86%E5%BC%B1%E6%80%A7%E8%AF%84%E4%BB%B7/</url>
    
    <content type="html"><![CDATA[<p>加载研究区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//加载研究区</span><br><span class="line">var studyArea = pie.FeatureCollection(&quot;NGCC/CHINA_CITY_BOUNDARY&quot;)</span><br><span class="line">    .filter(pie.Filter.eq(&quot;name&quot;,&quot;邯郸市&quot;))</span><br><span class="line">    .first()</span><br><span class="line">    .geometry();</span><br><span class="line">//加载研究区边界</span><br><span class="line">Map.addLayer(studyArea, &#123; color: &#x27;black&#x27;, fillColor: &#x27;00000000&#x27; &#125;, &quot;roi&quot;);</span><br><span class="line">//定位地图中心</span><br><span class="line">Map.centerObject(studyArea, 8);</span><br></pre></td></tr></table></figure><p>dem及坡度代码（未修改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var SRTM = pie.ImageCollection(&#x27;DEM/SRTM_30&#x27;)</span><br><span class="line">     .filterBounds(studyArea)</span><br><span class="line">     .select(&quot;elevation&quot;)</span><br><span class="line">     .mean()</span><br><span class="line">     .clip(studyArea);</span><br><span class="line">//DEM数据归一化</span><br><span class="line">var srtm_band = SRTM.select(&#x27;elevation&#x27;)</span><br><span class="line">var srtm_minmax = SRTM.reduceRegion(pie.Reducer.minMax(), studyArea, 30);</span><br><span class="line">srtm_minmax = pie.Dictionary(srtm_minmax);</span><br><span class="line">var elevation_min = pie.Number(srtm_minmax.get(&quot;elevation_min&quot;));</span><br><span class="line">var elevation_max = pie.Number(srtm_minmax.get(&quot;elevation_max&quot;));</span><br><span class="line">var dem_result = pie.Image(elevation_max).subtract(srtm_band).divide(elevation_max.subtract(elevation_min));</span><br><span class="line">var vis_DEM = &#123;</span><br><span class="line"> min:0,</span><br><span class="line"> max:1,</span><br><span class="line"> palette: [&#x27;#BF812D&#x27;, &#x27;#DFC27D&#x27;, &#x27;#F6E8C3&#x27;, &#x27;#A1D99B&#x27;, &#x27;#41AB5D&#x27;]</span><br><span class="line">&#125;;</span><br><span class="line">Map.addLayer(dem_result, vis_DEM, &quot;dem&quot;, false);</span><br><span class="line">//Slope归一化//计算坡度</span><br><span class="line">var Slope = pie.Terrain.slope(SRTM).rename(&quot;slope&quot;);</span><br><span class="line">var slope_band = Slope.select(&#x27;slope&#x27;)</span><br><span class="line">var slope_minmax = Slope.reduceRegion(pie.Reducer.minMax(), studyArea, 30);</span><br><span class="line">slope_minmax = pie.Dictionary(slope_minmax);</span><br><span class="line">var slope_min = pie.Number(slope_minmax.get(&quot;slope_min&quot;));</span><br><span class="line">var slope_max = pie.Number(slope_minmax.get(&quot;slope_max&quot;));</span><br><span class="line">var slope_result = pie.Image(slope_max).subtract(slope_band).divide(slope_max.subtract(slope_min));</span><br><span class="line">var vis_slope = &#123;</span><br><span class="line"> min:0,</span><br><span class="line"> max:1,</span><br><span class="line"> palette: [&#x27;#C7E9C0&#x27;, &#x27;#F6E8C3&#x27;, &#x27;#DFC27D&#x27;, &#x27;#CD853F&#x27;, &#x27;#BF812D&#x27;]</span><br><span class="line">&#125;;</span><br><span class="line">Map.addLayer(slope_result, vis_slope, &quot;slope&quot;, false);</span><br></pre></td></tr></table></figure><p>湿度代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//湿度</span><br><span class="line">function WET(img,studyArea)&#123;</span><br><span class="line">    var B=img.select(&quot;B2&quot;);</span><br><span class="line">    var G=img.select(&quot;B3&quot;);</span><br><span class="line">    var R=img.select(&quot;B4&quot;);</span><br><span class="line">    var NIR=img.select(&quot;B5&quot;);</span><br><span class="line">    var SWIR1=img.select(&quot;B6&quot;);</span><br><span class="line">    var SWIR2=img.select(&quot;B7&quot;);</span><br><span class="line">    var WET=B.multiply(0.1509).add(G.multiply(0.1973).add(R.multiply(0.3279).add(NIR.multiply(0.3406).add(SWIR1.multiply(-0.7112).add(SWIR2.multiply(-0.4572))))))</span><br><span class="line">    .rename(&quot;WET&quot;);</span><br><span class="line">  //计算区域内WET最大值</span><br><span class="line">  var WET_max = WET.reduceRegion(pie.Reducer.max(),studyArea, reduceScale).get(</span><br><span class="line">    &quot;WET&quot;</span><br><span class="line">  );</span><br><span class="line">  WET_max = pie.Number(WET_max);</span><br><span class="line">  //计算区域内WET最小值</span><br><span class="line">  var WET_min = WET.reduceRegion(pie.Reducer.min(), studyArea, reduceScale).get(</span><br><span class="line">    &quot;WET&quot;</span><br><span class="line">  );</span><br><span class="line">  WET_min = pie.Number(WET_min);</span><br><span class="line">  var img_WET = WET.subtract(WET_min).divide(WET_max.subtract(WET_min));</span><br><span class="line">  return img_WET;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>年平均降水量（现在是月平均降水量，之后修改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//月平均降水量//想办法转换成年降水量</span><br><span class="line">function TEM(img,studyArea)&#123;</span><br><span class="line">    var TEM=img.select(&quot;B1&quot;).rename(&quot;TEM&quot;);</span><br><span class="line">      //计算区域内WET最大值</span><br><span class="line">  var TEM_max = TEM.reduceRegion(pie.Reducer.max(),studyArea, reduceScale).get(</span><br><span class="line">    &quot;TEM&quot;</span><br><span class="line">  );</span><br><span class="line">  TEM_max = pie.Number(TEM_max);</span><br><span class="line">  //计算区域内WET最小值</span><br><span class="line">  var TEM_min = TEM.reduceRegion(pie.Reducer.min(), studyArea, reduceScale).get(</span><br><span class="line">    &quot;TEM&quot;</span><br><span class="line">  );</span><br><span class="line">  TEM_min = pie.Number(TEM_min);</span><br><span class="line">  var img_TEM = TEM.subtract(TEM_min).divide(TEm_max.subtract(TEM_min));</span><br><span class="line">  return img_TEM;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空气质量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">var visAQI = &#123;</span><br><span class="line">   min: 0,</span><br><span class="line">   max: 1,</span><br><span class="line">   palette: [</span><br><span class="line">     &quot;#040274&quot;,</span><br><span class="line">     &quot;#040281&quot;,</span><br><span class="line">     &quot;#0502a3&quot;,</span><br><span class="line">     &quot;#0502b8&quot;,</span><br><span class="line">     &quot;#0502ce&quot;,</span><br><span class="line">     &quot;#0502e6&quot;,</span><br><span class="line">     &quot;#0602ff&quot;,</span><br><span class="line">     &quot;#235cb1&quot;,</span><br><span class="line">     &quot;#307ef3&quot;,</span><br><span class="line">     &quot;#269db1&quot;,</span><br><span class="line">     &quot;#30c8e2&quot;,</span><br><span class="line">     &quot;#32d3ef&quot;,</span><br><span class="line">     &quot;#3be285&quot;,</span><br><span class="line">     &quot;#3ff38f&quot;,</span><br><span class="line">     &quot;#86e26f&quot;,</span><br><span class="line">     &quot;#3ae237&quot;,</span><br><span class="line">     &quot;#b5e22e&quot;,</span><br><span class="line">     &quot;#d6e21f&quot;,</span><br><span class="line">     &quot;#fff705&quot;,</span><br><span class="line">     &quot;#ffd611&quot;,</span><br><span class="line">     &quot;#ffb613&quot;,</span><br><span class="line">     &quot;#ff8b13&quot;,</span><br><span class="line">     &quot;#ff6e08&quot;,</span><br><span class="line">     &quot;#ff500d&quot;,</span><br><span class="line">     &quot;#ff0000&quot;,</span><br><span class="line">     &quot;#de0101&quot;,</span><br><span class="line">     &quot;#c21301&quot;,</span><br><span class="line">     &quot;#a71001&quot;,</span><br><span class="line">     &quot;#911003&quot;,</span><br><span class="line">   ],</span><br><span class="line"> &#125;;</span><br><span class="line">  // NO2 去云函数</span><br><span class="line"> function cloudMask(image) &#123;</span><br><span class="line">   var k = image.updateMask(image.select(&quot;cloud_fraction&quot;).lt(0.2));</span><br><span class="line">   return k.select(&quot;tropospheric_NO2_column_number_density&quot;);</span><br><span class="line"> &#125; //NO2 去云</span><br><span class="line"> </span><br><span class="line"> function normalNO2(startDate, endDate, roi) &#123;</span><br><span class="line">   //加载对二氧化氮进行监测的近实时数据流产品数据</span><br><span class="line">   var NO2cOLL = pie</span><br><span class="line">     .ImageCollection(&quot;S5P/OFFL_L3_NO2&quot;)</span><br><span class="line">     .filterBounds(roi)</span><br><span class="line">     .filterDate(startDate, endDate);</span><br><span class="line">   var NO2IMG = NO2cOLL.select([</span><br><span class="line">     &quot;tropospheric_NO2_column_number_density&quot;,</span><br><span class="line">     &quot;cloud_fraction&quot;,</span><br><span class="line">   ]).map(cloudMask);</span><br><span class="line">   NO2IMG = NO2IMG.mean().clip(roi).rename(&quot;NO2&quot;);</span><br><span class="line">   var NO23_max = NO2IMG.reduceRegion(pie.Reducer.max(), roi, 7000).get(&quot;NO2&quot;);</span><br><span class="line">   NO23_max = pie.Number(NO23_max);</span><br><span class="line">   var NO23_min = NO2IMG.reduceRegion(pie.Reducer.min(), roi, 7000).get(&quot;NO2&quot;);</span><br><span class="line">   NO23_min = pie.Number(NO23_min);</span><br><span class="line">   var NORNO23 = NO2IMG.subtract(NO23_min).divide(NO23_max.subtract(NO23_min));</span><br><span class="line">   return NORNO23;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> // O3 去云函数</span><br><span class="line"> function cloudMask_O3(image) &#123;</span><br><span class="line">   var k = image.updateMask(image.select(&quot;cloud_fraction&quot;).lt(0.2));</span><br><span class="line">   return k.select(&quot;O3_column_number_density&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> function normalO3(startDate, endDate, roi) &#123;</span><br><span class="line">   var O3 = pie</span><br><span class="line">     .ImageCollection(&quot;S5P/OFFL_L3_O3&quot;)</span><br><span class="line">     .filterBounds(roi)</span><br><span class="line">     .filterDate(startDate, endDate);</span><br><span class="line">   var O33 = O3.select([&quot;O3_column_number_density&quot;, &quot;cloud_fraction&quot;])</span><br><span class="line">     .map(cloudMask_O3)</span><br><span class="line">     .mean()</span><br><span class="line">     .clip(roi)</span><br><span class="line">     .rename(&quot;O3&quot;);</span><br><span class="line">   var O33_max = O33.reduceRegion(pie.Reducer.max(), roi, 7500).get(&quot;O3&quot;);</span><br><span class="line">   O33_max = pie.Number(O33_max);</span><br><span class="line">   var O33_min = O33.reduceRegion(pie.Reducer.min(), roi, 7500).get(&quot;O3&quot;);</span><br><span class="line">   O33_min = pie.Number(O33_min);</span><br><span class="line">   var NORO33 = O33.subtract(O33_min).divide(O33_max.subtract(O33_min));</span><br><span class="line">   return NORO33;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> //SO2 去云</span><br><span class="line"> function cloudMask_SO2(image) &#123;</span><br><span class="line">   var k = image.updateMask(image.select(&quot;cloud_fraction&quot;).lt(0.2));</span><br><span class="line">   return k.select(&quot;SO2_column_number_density&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> function normalSO2(startDate, endDate, roi) &#123;</span><br><span class="line">   var SO2 = pie</span><br><span class="line">     .ImageCollection(&quot;S5P/OFFL_L3_SO2&quot;)</span><br><span class="line">     .filterBounds(roi)</span><br><span class="line">     .filterDate(startDate, endDate);</span><br><span class="line">   var SO23 = SO2.select([&quot;SO2_column_number_density&quot;, &quot;cloud_fraction&quot;])</span><br><span class="line">     .map(cloudMask_SO2)</span><br><span class="line">     .mean()</span><br><span class="line">     .clip(roi)</span><br><span class="line">     .rename(&quot;SO2&quot;);</span><br><span class="line">   var SO23_max = SO23.reduceRegion(pie.Reducer.max(), roi, 7500).get(&quot;SO2&quot;);</span><br><span class="line">   SO23_max = pie.Number(SO23_max);</span><br><span class="line">   var SO23_min = SO23.reduceRegion(pie.Reducer.min(), roi, 7500).get(&quot;SO2&quot;);</span><br><span class="line">   SO23_min = pie.Number(SO23_min);</span><br><span class="line"> </span><br><span class="line">   //归一化</span><br><span class="line">   var NORSO23 = SO23.subtract(SO23_min).divide(SO23_max.subtract(SO23_min));</span><br><span class="line">   //加载春季SO2影像</span><br><span class="line">   return NORSO23;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> //CO 指标归一化 唯一一个没有执行去云操作的？</span><br><span class="line"> function normalCO(startDate, endDate, roi) &#123;</span><br><span class="line">   var CO3 = pie</span><br><span class="line">     .ImageCollection(&quot;S5P/OFFL_L3_CO&quot;)</span><br><span class="line">     .filterBounds(roi)</span><br><span class="line">     .filterDate(startDate, endDate)</span><br><span class="line">     .select(&quot;CO_column_number_density&quot;)</span><br><span class="line">     .mean()</span><br><span class="line">     .clip(roi)</span><br><span class="line">     .rename(&quot;CO&quot;);</span><br><span class="line">   var CO3_max = CO3.reduceRegion(pie.Reducer.max(), roi, 7500).get(&quot;CO&quot;);</span><br><span class="line">   CO3_max = pie.Number(CO3_max);</span><br><span class="line">   var CO3_min = CO3.reduceRegion(pie.Reducer.min(), roi, 7500).get(&quot;CO&quot;);</span><br><span class="line">   CO3_min = pie.Number(CO3_min);</span><br><span class="line">   var NORCO3 = CO3.subtract(CO3_min).divide(CO3_max.subtract(CO3_min));</span><br><span class="line">   return NORCO3;</span><br><span class="line"> &#125;</span><br><span class="line"> //计算空气质量，AQI空气质量指数</span><br><span class="line"> function normalAQI(startDate, endDate, roi) &#123;</span><br><span class="line">   var co = normalCO(startDate, endDate, roi);</span><br><span class="line">   var so2 = normalSO2(startDate, endDate, roi);</span><br><span class="line">   var o3 = normalO3(startDate, endDate, roi);</span><br><span class="line">   var no2 = normalNO2(startDate, endDate, roi);</span><br><span class="line">   var AQI5 = no2</span><br><span class="line">     .multiply(0.25)</span><br><span class="line">     .add(o3.multiply(0.25))</span><br><span class="line">     .add(so2.multiply(0.25))</span><br><span class="line">     .add(co.multiply(0.25))</span><br><span class="line">     .rename(&quot;AQI5&quot;);</span><br><span class="line">   //计算最大值最小值</span><br><span class="line">   var AQI5_max = AQI5.reduceRegion(pie.Reducer.max(), roi, 7500).get(&quot;AQI5&quot;);</span><br><span class="line">   AQI5_max = pie.Number(AQI5_max);</span><br><span class="line">   var AQI5_min = AQI5.reduceRegion(pie.Reducer.min(), roi, 7500).get(&quot;AQI5&quot;);</span><br><span class="line">   AQI5_min = pie.Number(AQI5_min);</span><br><span class="line">   //归一化</span><br><span class="line">   var NORAQI5 = AQI5.subtract(AQI5_min)</span><br><span class="line">     .divide(AQI5_max.subtract(AQI5_min))</span><br><span class="line">     .rename(&quot;NORAQI5&quot;);</span><br><span class="line">   //加载夏季AQI影像</span><br><span class="line">   return NORAQI5;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>遥感</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PIE</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
